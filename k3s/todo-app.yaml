apiVersion: apps/v1
kind: Deployment
metadata:
  name: deployment-app
  namespace: app
  annotations:
    desc: go-api service which handles all the requests.
# Pod definition. A pod can manage more than one container
spec:
  replicas: 4
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 0
# Tell kubernetes deployment which pods to manage (label based system)
  selector:
    matchLabels:
      app: todo
  template:
    metadata:
        labels:
          app: todo
        annotations:
          desc: webserver
    spec:
      containers: 
      - name: pod-app-todo
        image: ghcr.io/benedicthomuth/bachelor-thesis/server:latest
        ports:
        - name: server-port
          containerPort: 8080
        resources:
          requests:
            cpu: "100m"
            memory: "100Mi"
          limits:
            cpu: "150m"
            memory: "150Mi"
      imagePullSecrets:
      - name: github-cr

--- 
# Services in kubernetes are used to make persistent addresses to pods or a group of pods
# So a loadbalancer for those pod instances

apiVersion: v1
kind: Service
metadata:
  name: service-app
  namespace: app
spec:
  selector:
    app: todo
  ports:
  - name: server-port
    port: 80
    targetPort: server-port # redirect incomping traffic (port 80) to one of the service managed pods which are running there app on port 3000
    nodePort: 32323
  type: NodePort

---

### Database ###
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: deployment-database
  namespace: app
  annotations:
    desc: persistent storage for app data.
spec:
  serviceName: postgres
  replicas: 1
  # strategy:
  #   type: RollingUpdate
  #   rollingUpdate:
  #     maxSurge: 1
  #     maxUnavailable: 0
  selector:
    matchLabels:
      app: database
  template:
    metadata:
        labels:
          app: database
        annotations:
          desc: webserver
    spec:
      containers: 
      - name: pod-database
        image: ghcr.io/benedicthomuth/bachelor-thesis/database:latest
        env:
        - name: POSTGRES_DB
          value: todo-db
        - name: POSTGRES_PASSWORD
          value: helloWorld!
        - name: POSTGRES_USER
          value: dbUser
        ports:
        - name: postgres
          containerPort: 5432
        resources:
          requests:
            cpu: "100m"
            memory: "100Mi"
          limits:
            cpu: "150m"
            memory: "150Mi"
        volumeMounts:
        - name: db-data
          mountPath: /var/lib/postgresql/data
      imagePullSecrets:
        - name: github-cr
      volumes:
      - name: db-data
        persistentVolumeClaim: 
          claimName: db-data-claim

--- 

apiVersion: v1
kind: Service
metadata:
  name: postgres
  namespace: app
spec:
  selector:
    app: database
  ports:
  - name: http
    port: 5432
    targetPort: postgres
